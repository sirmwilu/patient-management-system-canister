type AntepenultimateSelfRef = record { ultimate : opt UltimateSelfRef };
type ComplexRecord = record {
  one : nat16;
  six : _InlineComplexRecordSix;
  two : bool;
  three : bool;
  five : vec SimpleRecord;
  four : vec bool;
  seven : RecordWithoutDirectInlineRecords;
};
type DeepInlineRecords = record {
  one : _InlineDeepInlineRecordsOne;
  six : _InlineComplexRecordSix;
};
type Fun = variant { id; cool };
type Good = record { id : text };
type InlineArrayStruct = record { arr : vec _InlineInlineArrayStructArr };
type InlineExample = record {
  second_field : _InlineInlineExampleSecondField;
  first_field : _InlineInlineExampleFirstField;
  third_field : _InlineInlineExampleFirstField;
};
type InlineOptionStruct = record { "opt" : opt _InlineInlineArrayStructArr };
type PenultimateSelfRef = record { antepenultimate : AntepenultimateSelfRef };
type Reaction = variant { Fun : Fun; Great; Fire; Good : Good };
type RecordWithInline = record {
  inline_func : func (text) -> (text) query;
  inline_variant : _InlineRecordWithInlineInlineVariant;
  inline_record : _InlineRecordWithInlineInlineRecord;
};
type RecordWithoutDirectInlineRecords = record { one : DeepInlineRecords };
type SelfReferencingFunc = func (bool, opt SelfReferencingFunc) -> (text) query;
type SelfReferencingRecord = record {
  one : opt SelfReferencingRecord;
  two : text;
};
type SelfReferencingTuple = record { text; opt SelfReferencingTuple };
type SelfReferencingVariant = variant { One : SelfReferencingVariant; Two };
type SimpleRecord = record { one : bool; other : vec bool };
type StructWithInlineArray = record {
  array : vec _InlineStructWithInlineArrayArray;
  name : text;
  not_array : _InlineStructWithInlineArrayArray;
};
type TypeAliasOnlyUsedInline = record { one : bool };
type UltimateSelfRef = record { pen_ultimate : PenultimateSelfRef };
type VariantWithInline = variant {
  thing;
  inline_func : func (text) -> (text) query;
  inline_variant : _InlineRecordWithInlineInlineVariant;
  inline_record : _InlineRecordWithInlineInlineRecord;
};
type Yes = variant { One; Two; Three };
type _InlineArrayTestInlineArray = record { thing : text };
type _InlineArrayTestInlineStructWithArray = record {
  arr : vec _InlineArrayTestInlineStructWithArrayArr;
};
type _InlineArrayTestInlineStructWithArrayArr = record {
  inline_number : nat16;
};
type _InlineCanisterTuple12 = record {
  tuple_inline2 : text;
  tuple_inline : bool;
};
type _InlineComplexRecordSix = record { one : text; two : SimpleRecord };
type _InlineComplexRecordTestInlineTest = record {
  one : text;
  two : SimpleRecord;
  three : _InlineComplexRecordTestInlineTestThree;
  four : _InlineComplexRecordTestInlineTestFour;
};
type _InlineComplexRecordTestInlineTest1 = record {
  one : text;
  two : SimpleRecord;
  three : bool;
};
type _InlineComplexRecordTestInlineTestFour = record {
  sub_one : bool;
  sub_two : _InlineComplexRecordTestInlineTestFourSubTwo;
};
type _InlineComplexRecordTestInlineTestFourSubTwo = record { sub_three : bool };
type _InlineComplexRecordTestInlineTestThree = record {
  sub_one : bool;
  sub_two : bool;
};
type _InlineComplexRecordTestInlineWithTypeAliasDependency = record {
  one : TypeAliasOnlyUsedInline;
};
type _InlineComplexRecordTestOtherInlineTest = record {
  one : _InlineComplexRecordTestOtherInlineTestOne;
  two : _InlineComplexRecordTestOtherInlineTestTwo;
  three : _InlineComplexRecordTestOtherInlineTestThree;
};
type _InlineComplexRecordTestOtherInlineTest2 = record {
  one : bool;
  two : nat16;
  three : ComplexRecord;
};
type _InlineComplexRecordTestOtherInlineTestOne = record { one_inline : bool };
type _InlineComplexRecordTestOtherInlineTestThree = record {
  three_inline : ComplexRecord;
};
type _InlineComplexRecordTestOtherInlineTestTwo = record { two_inline : nat16 };
type _InlineDeepInlineRecordsOne = record { thing : bool };
type _InlineHashDuplicationTestRecord = record {
  one : bool;
  two : bool;
  three : bool;
};
type _InlineHashDuplicationTestVariant = variant {
  one : bool;
  two : bool;
  three : bool;
};
type _InlineInlineArrayAlias = record { inline_bool : bool };
type _InlineInlineArrayStructArr = record { inline_string : text };
type _InlineInlineExampleFirstField = record { one : bool; two : text };
type _InlineInlineExampleSecondField = record {
  one : bool;
  two : _InlineArrayTestInlineArray;
};
type _InlineInlineParam = record { one : nat16; two : nat16 };
type _InlineInlineReturnType = record {
  one : text;
  two : _InlineInlineReturnTypeTwo;
};
type _InlineInlineReturnTypeTwo = record {
  two_a : _InlineInlineReturnTypeTwoTwoA;
  two_b : bool;
};
type _InlineInlineReturnTypeTwoTwoA = record { two_a_i : nat16 };
type _InlineInlineVecArray = record { thing : text; thing2 : bool };
type _InlineNotSoSimpleFourteen = record { thing : text };
type _InlineOptionTestInlineStructWithArray = record {
  arr : opt _InlineArrayTestInlineStructWithArrayArr;
};
type _InlineRecordWithInlineInlineRecord = record {
  one : bool;
  two : bool;
  three : bool;
};
type _InlineRecordWithInlineInlineVariant = variant {
  one : text;
  two;
  three : bool;
};
type _InlineStructWithInlineArrayArray = record { thing : bool; thing2 : bool };
service : () -> {
  arrayTest : (
      vec bool,
      vec _InlineArrayTestInlineArray,
      vec _InlineInlineArrayAlias,
      InlineArrayStruct,
      _InlineArrayTestInlineStructWithArray,
    ) -> ();
  complexRecordTest : (
      ComplexRecord,
      SimpleRecord,
      bool,
      _InlineComplexRecordTestInlineTest1,
      _InlineComplexRecordTestOtherInlineTest2,
      _InlineComplexRecordTestInlineTest,
      _InlineComplexRecordTestOtherInlineTest,
      _InlineComplexRecordTestInlineWithTypeAliasDependency,
    ) -> (nat8) query;
  everythingInline : (RecordWithInline, VariantWithInline) -> ();
  getPrincipals : (vec vec principal) -> (vec vec principal);
  hashDuplicationTest : (
      _InlineHashDuplicationTestRecord,
      _InlineHashDuplicationTestVariant,
      _InlineHashDuplicationTestRecord,
      _InlineHashDuplicationTestVariant,
    ) -> ();
  inline : (_InlineInlineParam) -> (_InlineInlineReturnType) query;
  inlineQuery : (InlineExample) -> () query;
  inlineVec : (vec _InlineInlineVecArray, StructWithInlineArray) -> () query;
  notSoSimple : (
      vec int8,
      int16,
      int32,
      int64,
      nat8,
      nat16,
      nat32,
      nat64,
      vec nat8,
      float32,
      float64,
      principal,
      null,
      _InlineNotSoSimpleFourteen,
    ) -> ();
  oneVariant : (Fun) -> () query;
  optionTest : (
      opt bool,
      opt _InlineNotSoSimpleFourteen,
      opt _InlineInlineArrayAlias,
      InlineOptionStruct,
      _InlineOptionTestInlineStructWithArray,
    ) -> ();
  selfReference : (
      SelfReferencingVariant,
      SelfReferencingRecord,
      record { text; opt SelfReferencingTuple },
      func (bool, opt SelfReferencingFunc) -> (text) query,
    ) -> () query;
  simpleQuery : (opt nat64, text, nat, bool) -> (text) query;
  tupleTest : (
      record { text; nat64; _InlineCanisterTuple12; bool },
    ) -> () query;
  ultimateSelfReferenceTest : (UltimateSelfRef) -> ();
  variousVariants : (Yes, Reaction) -> (text) query;
  voidAliasTest : () -> () query;
}