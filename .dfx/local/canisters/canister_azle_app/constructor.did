type MedicalRecord = record {
  id : text;
  patientId : text;
  date : nat64;
  treatment : text;
  diagnosis : text;
};
type Patient = record {
  id : text;
  age : float64;
  admittedAt : opt nat64;
  name : text;
  medicalRecords : vec MedicalRecord;
  gender : text;
  dischargedAt : opt nat64;
  isAdmitted : bool;
};
type PatientPayload = record {
  age : float64;
  name : text;
  medicalRecords : vec MedicalRecord;
  gender : text;
};
type _AzleResult = variant { Ok : Patient; Err : text };
type _AzleResult_1 = variant { Ok : opt Patient; Err : text };
type _AzleResult_2 = variant { Ok : vec MedicalRecord; Err : text };
type _AzleResult_3 = variant { Ok : vec Patient; Err : text };
service : () -> {
  addMedicalRecord : (text, MedicalRecord) -> (_AzleResult);
  addPatient : (PatientPayload) -> (_AzleResult);
  admitPatient : (text) -> (_AzleResult);
  deleteMedicalRecord : (text, text) -> (_AzleResult);
  deletePatient : (text) -> (_AzleResult_1);
  dischargePatient : (text) -> (_AzleResult);
  getMedicalRecords : (text) -> (_AzleResult_2) query;
  getPatient : (text) -> (_AzleResult) query;
  getPatients : () -> (_AzleResult_3) query;
  searchPatients : (text) -> (_AzleResult_3) query;
  updateMedicalRecord : (text, text, MedicalRecord) -> (_AzleResult);
  updatePatient : (text, PatientPayload) -> (_AzleResult);
}